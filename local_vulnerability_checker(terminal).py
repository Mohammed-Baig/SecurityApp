import psutil
import os
import json
import tlsh
import time

#1. Signature Based Detection: Database of known malware signatures. Compare files with DB
#DB source: https://github.com/VISWESWARAN1998/open-threat-database/tree/master
def load_threat_db(folder_path):
    threat_list = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.json'):
            file_path = os.path.join(folder_path, filename)
            with open(file_path, 'r') as file:
                threat_data = json.load(file)
                threat_list.append(threat_data)
    return threat_list

def print_threat_db(threat_db):
    for threat in threat_db:
        print(threat)

def compute_tlsh(filename):
    try:
        # Replace 'your_file.txt' with the actual file you are trying to open
        with open(filename, 'rb') as file:
            data = file.read()
            return tlsh.hash(data)
    except FileNotFoundError as e:
        print(f"Error: {e}")
        exit(1)

def check_threat_db(target_file, threat_db):
    target_tlsh = compute_tlsh(target_file)
    for threat in threat_db:
        if threat['tlsh'] in target_tlsh:
            return True, threat
    return False, None

def check_folder(folder_path, threat_db):
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            found, threat = check_threat_db(file_path, threat_db)
            if found:
                print(f"Threat detected! The file '{file_path}' matches the threat: {threat['name']}")
            else:
                print(f"No threat detected for the file '{file_path}'.")

def interactive_check(threat_db):
    while True:
        user_input = input("Enter a file or folder path to check (or type 'exit' to quit): ")
        if user_input.lower() == 'exit':
            break
        if os.path.isfile(user_input):
            found, threat = check_threat_db(user_input, threat_db)
            if found:
                print(f"Threat detected! The file '{user_input}' matches the threat: {threat['name']}")
            else:
                print(f"No threat detected for the file '{user_input}'.")
        elif os.path.isdir(user_input):
            check_folder(user_input, threat_db)
        else:
            print(f"'{user_input}' is not a valid file or folder path.")

#2. Behavioral: Look for behaviour
def monitor_processes():
    while True:
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
            try:
                # Check if the process is consuming abnormal amounts of CPU or memory
                if proc.info['cpu_percent'] > 50:  # Example threshold
                    print(f"High CPU usage detected: {proc.info['name']} (PID: {proc.info['pid']})")
                if proc.info['memory_info'].rss > 500 * 1024 * 1024:  # Example threshold (500 MB)
                    print(f"High memory usage detected: {proc.info['name']} (PID: {proc.info['pid']})")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        continue_confirm = input("Do you want to continue? (y/n):")
        if continue_confirm.lower() == "y":
            time.sleep(5)  # Interval between scans
        else:
            exit()
def main():

    choice = input("Would you like to:\n1. Run the checker on a specific file\n2. Run the checker on a file path\n3. Run the checker on specific files\n4. Run the checker on the full system\nChoice here: ")
    if choice == "1":
        print("1. Starting with Signature Based Detection")
        threat_db = load_threat_db('threat_db')

        #Optional just to see if everything loaded correctly
        #print_threat_db(threat_db)

        target_file = input("Enter the file path of the file here: ")
        found, threat = check_threat_db(target_file, threat_db)
        if found:
            print(f"Threat detected! The file '{target_file}' matches the threat: {threat['name']}")
        else:
            print(f"No threat detected for the file '{target_file}'.")



    elif choice == "2":
        print("1. Starting with Signature Based Detection")
        threat_db = load_threat_db('threat_db')

        # Optional just to see if everything loaded correctly
        # print_threat_db(threat_db)

        target_folder = input("Enter the folder path here: ")
        check_folder(target_folder, threat_db)

    elif choice == "3":
        threat_db = load_threat_db('threat_db')

        # Optional just to see if everything loaded correctly
        # print_threat_db(threat_db)

        interactive_check(threat_db)

    elif choice == "4":
        print("1. Starting with Signature Based Detection")
        threat_db = load_threat_db('threat_db')

        # Optional just to see if everything loaded correctly
        # print_threat_db(threat_db)

        check_folder("C\\", threat_db)

    else:
        print("Invalid input, try again later")


    print("2. Starting with Signature Based Detection")
    monitor_processes()


if __name__ == "__main__":
    main()