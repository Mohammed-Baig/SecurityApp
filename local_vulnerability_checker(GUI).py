import os
import json
import tlsh
import time
import psutil
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext

def load_threat_db(folder_path):
    threat_list = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.json'):
            file_path = os.path.join(folder_path, filename)
            with open(file_path, 'r') as file:
                threat_data = json.load(file)
                threat_list.append(threat_data)
    return threat_list


def compute_tlsh(filename):
    try:
        with open(filename, 'rb') as file:
            data = file.read()
            return tlsh.hash(data)
    except FileNotFoundError as e:
        print(f"Error: {e}")
        exit(1)


def check_threat_db(target_file, threat_db):
    target_tlsh = compute_tlsh(target_file)
    for threat in threat_db:
        if threat['tlsh'] in target_tlsh:
            return True, threat
    return False, None


def check_folder(folder_path, threat_db, result_text):
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            found, threat = check_threat_db(file_path, threat_db)
            if found:
                result_text.insert(tk.END,
                                   f"Threat detected! The file '{file_path}' matches the threat: {threat['name']}\n")
            else:
                result_text.insert(tk.END, f"No threat detected for the file '{file_path}'.\n")


def interactive_check(threat_db, result_text):
    def check_file_or_folder():
        user_input = entry.get()
        if os.path.isfile(user_input):
            found, threat = check_threat_db(user_input, threat_db)
            if found:
                result_text.insert(tk.END,
                                   f"Threat detected! The file '{user_input}' matches the threat: {threat['name']}\n")
            else:
                result_text.insert(tk.END, f"No threat detected for the file '{user_input}'.\n")
        elif os.path.isdir(user_input):
            check_folder(user_input, threat_db, result_text)
        else:
            result_text.insert(tk.END, f"'{user_input}' is not a valid file or folder path.\n")

    input_window = tk.Toplevel()
    input_window.title("Interactive Check")

    tk.Label(input_window, text="Enter a file or folder path to check:").pack()
    entry = tk.Entry(input_window, width=50)
    entry.pack()
    tk.Button(input_window, text="Check", command=check_file_or_folder).pack()


def monitor_processes(result_text):
    while True:
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
            try:
                if proc.info['cpu_percent'] > 50:  # Example threshold
                    result_text.insert(tk.END,
                                       f"High CPU usage detected: {proc.info['name']} (PID: {proc.info['pid']})\n")
                if proc.info['memory_info'].rss > 500 * 1024 * 1024:  # Example threshold (500 MB)
                    result_text.insert(tk.END,
                                       f"High memory usage detected: {proc.info['name']} (PID: {proc.info['pid']})\n")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        result_text.insert(tk.END, "Process monitoring paused, press continue to resume.\n")
        continue_confirm = messagebox.askyesno("Continue Monitoring", "Do you want to continue monitoring processes?")
        if not continue_confirm:
            break
        time.sleep(5)  # Interval between scans


def run_checker(choice, threat_db, result_text):
    if choice == "1":
        file_path = filedialog.askopenfilename()
        if file_path:
            found, threat = check_threat_db(file_path, threat_db)
            if found:
                result_text.insert(tk.END,
                                   f"Threat detected! The file '{file_path}' matches the threat: {threat['name']}\n")
            else:
                result_text.insert(tk.END, f"No threat detected for the file '{file_path}'.\n")
    elif choice == "2":
        folder_path = filedialog.askdirectory()
        if folder_path:
            check_folder(folder_path, threat_db, result_text)
    elif choice == "3":
        interactive_check(threat_db, result_text)
    elif choice == "4":
        check_folder("C\\", threat_db, result_text)
    else:
        result_text.insert(tk.END, "Invalid input, try again.\n")


def main_gui():
    threat_db = load_threat_db('threat_db')

    root = tk.Tk()
    root.title("Anti-Malware Scanner")

    tk.Label(root, text="Anti-Malware Scanner", font=("Arial", 16)).pack(pady=10)

    choice_frame = tk.Frame(root)
    choice_frame.pack(pady=10)

    tk.Label(choice_frame, text="Select an option:").grid(row=0, column=0, padx=10)

    choice_var = tk.StringVar()
    choice_var.set("1")

    tk.Radiobutton(choice_frame, text="Run the checker on a specific file", variable=choice_var, value="1").grid(row=1,
                                                                                                                 column=0,
                                                                                                                 sticky="w",
                                                                                                                 padx=10)
    tk.Radiobutton(choice_frame, text="Run the checker on a file path", variable=choice_var, value="2").grid(row=2,
                                                                                                             column=0,
                                                                                                             sticky="w",
                                                                                                             padx=10)
    tk.Radiobutton(choice_frame, text="Run the checker on specific files", variable=choice_var, value="3").grid(row=3,
                                                                                                                column=0,
                                                                                                                sticky="w",
                                                                                                                padx=10)
    tk.Radiobutton(choice_frame, text="Run the checker on the full system", variable=choice_var, value="4").grid(row=4,
                                                                                                                 column=0,
                                                                                                                 sticky="w",
                                                                                                                 padx=10)

    result_text = scrolledtext.ScrolledText(root, width=80, height=20)
    result_text.pack(pady=10)

    tk.Button(root, text="Start Check", command=lambda: run_checker(choice_var.get(), threat_db, result_text)).pack(
        pady=5)
    tk.Button(root, text="Monitor Processes", command=lambda: monitor_processes(result_text)).pack(pady=5)

    root.mainloop()


if __name__ == "__main__":
    main_gui()
