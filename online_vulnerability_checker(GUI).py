import tkinter as tk
from tkinter import ttk, messagebox
import requests
import re
from pysafebrowsing import SafeBrowsing
import whois
import json

def redirection_checker(url):
    try:
        response = requests.head(url, allow_redirects=True)
        if response.url != url:
            return f"Redirection detected: '{url}' redirects to '{response.url}'"
        else:
            return "No redirection detected"
    except requests.exceptions.RequestException as e:
        return f"Error occurred: {e}"


def google_safe_browsing_check(url, api_key):
    s = SafeBrowsing(api_key)
    r = s.lookup_urls([url])
    return r


def whois_checker(url):
    w = whois.whois(url)
    return w


def urlscan_checker(url, api_key):
    headers = {'API-Key': api_key, 'Content-Type': 'application/json'}
    data = {"url": url, "visibility": "public"}
    response = requests.post('https://urlscan.io/api/v1/scan/', headers=headers, data=json.dumps(data))
    return response.json()


def https_check(url):
    url = url.strip()
    if url.startswith("http://"):
        scheme = "http"
    elif url.startswith("https://"):
        scheme = "https"
    else:
        return "Invalid URL"

    url_without_scheme = url[len(scheme) + 3:]
    pattern = re.compile(r'^(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(?:/[a-zA-Z0-9-._~:/?#@!$&\'()*+,;=%]*)?$')
    if pattern.match(url_without_scheme):
        return "Secure" if scheme == "https" else "Insecure"
    else:
        return "Invalid URL"


def grammar_checker(url):
    valid_tlds = ["com", "org", "net", "int", "edu", "gov", "mil", "co", "biz", "info", "mobi", "name", "ly", "me",
                  "io", "ai"]
    if url.startswith("http://"):
        url_without_scheme = url[7:]
    elif url.startswith("https://"):
        url_without_scheme = url[8:]
    else:
        url_without_scheme = url

    parts = url_without_scheme.split('/')
    domain_and_tld = parts[0]
    if '.' in domain_and_tld:
        domain_parts = domain_and_tld.split('.')
        domain = domain_parts[-2]
        tld = domain_parts[-1]
    else:
        return "Invalid URL"

    scam_patterns = {'rn': 'm', '1': 'l', 'I': 'l', '0': 'o', '9': 'g', '8': 'b', '6': 'G', '5': 's', 'l': 'i',
                     'i': 'l'}
    for pattern, replacement in scam_patterns.items():
        if pattern in domain:
            return f"Suspicious pattern detected in domain: '{pattern}' might be used instead of '{replacement}'"

    if tld not in valid_tlds:
        return f"Invalid TLD: '{tld}'"

    return "URL appears to be valid"


def run_checks():
    url = url_entry.get().strip()
    if not url:
        messagebox.showwarning("Input Error", "Please enter a URL")
        return

    results_text.delete(1.0, tk.END)
    results_text.insert(tk.END, f"Running checks for URL: {url}\n\n")

    results_text.insert(tk.END, "Redirection Check:\n")
    results_text.insert(tk.END, redirection_checker(url) + "\n\n")

    if google_check_var.get():
        api_key = google_api_entry.get().strip()
        if not api_key:
            messagebox.showwarning("Input Error", "Please enter your Google API key")
            return
        results_text.insert(tk.END, "Google Safe Browsing Check:\n")
        results_text.insert(tk.END, json.dumps(google_safe_browsing_check(url, api_key), indent=2) + "\n\n")

    results_text.insert(tk.END, "Whois Check:\n")
    results_text.insert(tk.END, str(whois_checker(url)) + "\n\n")

    if urlscan_check_var.get():
        api_key = urlscan_api_entry.get().strip()
        if not api_key:
            messagebox.showwarning("Input Error", "Please enter your URLScan API key")
            return
        results_text.insert(tk.END, "URLScan Check:\n")
        results_text.insert(tk.END, json.dumps(urlscan_checker(url, api_key), indent=2) + "\n\n")

    results_text.insert(tk.END, "HTTPS Check:\n")
    results_text.insert(tk.END, https_check(url) + "\n\n")

    results_text.insert(tk.END, "Grammar Check:\n")
    results_text.insert(tk.END, grammar_checker(url) + "\n\n")


# Create the main window
root = tk.Tk()
root.title("URL Checker")

# URL entry
ttk.Label(root, text="Enter URL:").grid(column=0, row=0, padx=10, pady=5)
url_entry = ttk.Entry(root, width=50)
url_entry.grid(column=1, row=0, padx=10, pady=5)

# Google Safe Browsing API Key
google_check_var = tk.BooleanVar()
google_check_button = ttk.Checkbutton(root, text="Use Google Safe Browsing", variable=google_check_var)
google_check_button.grid(column=0, row=1, padx=10, pady=5)

ttk.Label(root, text="Google API Key:").grid(column=0, row=2, padx=10, pady=5)
google_api_entry = ttk.Entry(root, width=50)
google_api_entry.grid(column=1, row=2, padx=10, pady=5)

# URLScan API Key
urlscan_check_var = tk.BooleanVar()
urlscan_check_button = ttk.Checkbutton(root, text="Use URLScan", variable=urlscan_check_var)
urlscan_check_button.grid(column=0, row=3, padx=10, pady=5)

ttk.Label(root, text="URLScan API Key:").grid(column=0, row=4, padx=10, pady=5)
urlscan_api_entry = ttk.Entry(root, width=50)
urlscan_api_entry.grid(column=1, row=4, padx=10, pady=5)

# Run checks button
run_button = ttk.Button(root, text="Run Checks", command=run_checks)
run_button.grid(column=0, row=5, columnspan=2, pady=10)

# Results text box
results_text = tk.Text(root, wrap='word', height=20, width=80)
results_text.grid(column=0, row=6, columnspan=2, padx=10, pady=5)

# Start the main event loop
root.mainloop()
