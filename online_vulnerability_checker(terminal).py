import requests
import re
from pysafebrowsing import SafeBrowsing
import whois
import json

#Redirection check
def redirection_checker(url):
    try:
        # Send a HEAD request to minimize data transferred
        response = requests.head(url, allow_redirects=True)

        # Check if the final URL after all redirections is different from the original URL
        if response.url != url:
            return f"Redirection detected: '{url}' redirects to '{response.url}'"
        else:
            return "No redirection detected"
    except requests.exceptions.RequestException as e:
        return f"Error occurred: {e}"

#Google Safe Browsing Check
def google_safe_browsing_check(url, api_key):
    s = SafeBrowsing(api_key)
    r = s.lookup_urls([url])
    return r

#Whois Lookup
def whois_checker(url):
    w = whois.whois("https://pypi.org/project/python-whois/")
    return w

#urlscan.io
def urlscan_checker(url, api_key):
    headers = {'API-Key': api_key, 'Content-Type': 'application/json'}
    data = {"url": url, "visibility": "public"}
    response = requests.post('https://urlscan.io/api/v1/scan/', headers=headers, data=json.dumps(data))
    #return response
    return response.json()

#https:// check
def https_check(url):
    url = url.strip()

    # Check if the URL starts with a scheme
    if url.startswith("http://"):
        scheme = "http"
    elif url.startswith("https://"):
        scheme = "https"
    else:
        return "Invalid URL"

    # Remove the scheme from the URL
    url_without_scheme = url[len(scheme) + 3:]

    # Define a regex pattern for validating the URL format
    pattern = re.compile(
        r'^(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(?:/[a-zA-Z0-9-._~:/?#@!$&\'()*+,;=%]*)?$'
    )

    # Validate the remaining URL
    if pattern.match(url_without_scheme):
        return "Secure" if scheme == "https" else "Insecure"
    else:
        return "Invalid URL"

#check for grammatical errors
def grammar_checker(url):
    valid_tlds = [
        "com", "org", "net", "int", "edu", "gov", "mil",
        "co", "biz", "info", "mobi", "name", "ly", "me", "io", "ai"
    ]
    # Remove the scheme from the URL for checking
    if url.startswith("http://"):
        url_without_scheme = url[7:]
    elif url.startswith("https://"):
        url_without_scheme = url[8:]
    else:
        url_without_scheme = url

    # Split the URL into parts
    parts = url_without_scheme.split('/')
    domain_and_tld = parts[0]

    # Extract the domain and TLD
    if '.' in domain_and_tld:
        domain_parts = domain_and_tld.split('.')
        domain = domain_parts[-2]
        tld = domain_parts[-1]
    else:
        return "Invalid URL"

    # Check for suspicious patterns in the domain
    scam_patterns = {
        'rn': 'm',
        '1': 'l',
        'I': 'l',
        '0': 'o',
        '9': 'g',
        '8': 'b',
        '6': 'G',
        '5': 's',
        'l': 'i',
        'i': 'l'
    }

    for pattern, replacement in scam_patterns.items():
        if pattern in domain:
            return f"Suspicious pattern detected in domain: '{pattern}' might be used instead of '{replacement}'"

    # Check if the TLD is valid
    if tld not in valid_tlds:
        return f"Invalid TLD: '{tld}'"

    return "URL appears to be valid"

def main():
    # Get input
    password_to_check = input("Enter the URL of the website here: ")

    # Run redirection check
    print("\nRunning redirection check results: {}\n".format(redirection_checker(password_to_check)))

    # OPTIONAL: Run google safe browsing check
    confirmation = input("Would you like to use a Google safe browsing check(will require an API key) y/n: ")
    if confirmation.lower() == 'y':
        apikey = input("Please enter your api key here: ")
        print("Google safe browsing check results: {}\n".format(google_safe_browsing_check(password_to_check, apikey)))
    else:
        print("invalid input or 'n' selected, moving on\n")

    # Run whois check
    print("whois check results: {}\n".format(whois_checker(password_to_check)))

    # OPTIONAL: run urlscan check
    confirmation = input("Would you like to use a urlscan check(will require an API key) y/n: ")
    if confirmation.lower() == 'y':
        apikey = input("Please enter your api key here: ")
        print("urlscan check results: {}\n".format(urlscan_checker(password_to_check, apikey)))
    else:
        print("invalid input or 'n' selected, moving on\n")

    # HTTPS checker
    print("https check results: {}\n".format(https_check(password_to_check)))

    # Grammar checker
    print("grammar check: {}\n".format(grammar_checker(password_to_check)))

if __name__ == "__main__":
    main()